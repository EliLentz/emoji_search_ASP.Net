{"version":3,"sources":["Components/Input_Value.tsx","Components/Emoji_List.tsx","Http/HttpRequests.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputBar","className","type","value","this","props","input","onChange","e","inputHandler","searchEmoji","React","Component","EmojiList","ClickToCopy","item","navigator","clipboard","writeText","symbol","console","log","result","map","onClick","title","GetEmojis","a","axios","get","then","resp","data","App","event","setState","query","target","state","request","filter","toLowerCase","includes","bind","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA0BeA,E,4JAdX,WAAU,IAAD,OACL,OACI,8BACI,uBACAC,UAAY,aACZC,KAAO,OACPC,MAASC,KAAKC,MAAMC,MACpBC,SAAa,SAACC,GAAO,EAAKH,MAAMI,aAAaD,GAAI,EAAKH,MAAMK,YAAYF,Y,GARjEG,IAAMC,WCERC,G,kNAMjBC,YAAc,SAACC,GACXC,UAAUC,UAAUC,UAAUH,EAAKI,S,4CAGvC,WAAS,IAAD,OACJ,OACI,sBAAKlB,UAAY,aAAjB,UACKmB,QAAQC,IAAIjB,KAAKC,MAAMiB,QACvBlB,KAAKC,MAAMiB,OAAOC,KAAI,SAACR,GAAD,OACnB,oBAAuBd,UAAY,YAAnC,SACI,yBAAQA,UAAY,cAAcuB,QAAW,kBAAM,EAAKV,YAAYC,IAApE,UACQ,iCAAOA,EAAKI,OAAZ,IAAqBJ,EAAKU,SAC1B,sBAAMxB,UAAY,kBAAlB,qCAHDc,EAAKU,iB,GAfGd,IAAMC,Y,iDCPtC,SAAec,IAAtB,+B,4CAAO,sBAAAC,EAAA,4DAEe,+BAFf,SAIQC,IAAMC,IAFC,gCAEgBC,MAAK,SAACC,GACxC,OAAOA,EAAKC,QALT,oF,0BC+DQC,E,kDApDb,WAAY5B,GAAoB,IAAD,8BAC7B,cAAMA,IAkBRI,aAAe,SAACyB,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOlC,SApBP,EA2B/BO,YAAc,SAACwB,GACb,EAAKI,MAAMC,QAAQT,MAAK,SAAAE,GACtB,EAAKG,SAAS,CACZb,OAAQU,EAAKQ,QAAO,SAACzB,GAAD,OAClBA,EAAKU,MAAMgB,cAAcC,SAASR,EAAMG,OAAOlC,MAAMsC,wBA5B3D,EAAKH,MAAQ,CACXF,MAAO,GACPd,OAAQ,GACRiB,QAASb,KAEX,EAAKjB,aAAe,EAAKA,aAAakC,KAAlB,gBACpB,EAAKjC,YAAc,EAAKA,YAAYiC,KAAjB,gBAEnB,EAAKL,MAAMC,QAAQT,MAAK,SAAAE,GACtB,EAAKG,SAAS,CAAEb,OAAQU,OAZG,E,0CAoC/B,WACE,OACE,sBAAK/B,UAAU,YAAf,UACE,sEACA,cAAC,EAAD,CACEK,MAAOF,KAAKkC,MAAMF,MAClB3B,aAAcL,KAAKK,aACnBC,YAAaN,KAAKM,cACpB,cAAC,EAAD,CACEY,OAAQlB,KAAKkC,MAAMhB,gB,GA/CXX,IAAMC,WCDTgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0d8a8b1e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input_Value.css'\r\n\r\ntype InputProps = {\r\n    readonly input: string,\r\n    readonly inputHandler: any,\r\n    readonly searchEmoji: any\r\n  }\r\n/**\r\n * this component builds an input bar to set query for filter a list\r\n */\r\nclass InputBar extends React.Component<InputProps>{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input \r\n                className = 'input-area'\r\n                type = 'text'\r\n                value = {this.props.input}\r\n                onChange = { (e) => {this.props.inputHandler(e); this.props.searchEmoji(e)}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputBar;","import React from 'react';\r\nimport './Emoji_List.css'\r\n\r\nexport interface Item {\r\n    title: string,\r\n    symbol: string\r\n}\r\ntype ResultProps = {\r\n    readonly result: Item[]\r\n  }\r\n/**\r\n * this component builds a list of buttons of all emojis from a json file\r\n */\r\nexport default class EmojiList extends React.Component<ResultProps>{\r\n    /**\r\n     * function that called onClick\r\n     * function copy current item to clipboard\r\n     * @param item - current emoji\r\n     */\r\n    ClickToCopy = (item: Item) => {\r\n        navigator.clipboard.writeText(item.symbol)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = 'emoji-list'>\r\n                {console.log(this.props.result)}\r\n                {this.props.result.map((item: Item) => (\r\n                    <li key = {item.title} className = 'item-list'>\r\n                        <button className = 'item-button' onClick = {() => this.ClickToCopy(item)}>\r\n                                <span>{item.symbol} {item.title}</span>\r\n                                <span className = 'hide-click-item'>Click to copy emoji</span>\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </div>\r\n            );\r\n    }  \r\n}","import axios from 'axios';\r\nimport { Item } from '../Components/Emoji_List';\r\n\r\n/**\r\n * Get async response from server\r\n */\r\nexport async function GetEmojis() : Promise<Item[]>{\r\n\r\n  const SERVER_PATH = \"http://127.0.0.1:26694/Emoji\";\r\n\r\n  return await axios.get(SERVER_PATH).then((resp) => {\r\n    return resp.data;\r\n  });\r\n}","import React from 'react';\nimport InputBar from './Components/Input_Value';\nimport EmojiList, { Item } from './Components/Emoji_List';\nimport './App.css'\nimport { GetEmojis } from './Http/HttpRequests';\n\ntype QueryState = {\n  query: string,\n  result: Item[],\n  request: Promise<Item[]>\n}\n\ntype QueryProps = {\n}\n\nclass App extends React.Component<QueryProps, QueryState>{\n\n  constructor(props: QueryProps) {\n    super(props);\n\n    this.state = {\n      query: '',\n      result: [],\n      request: GetEmojis()\n    }\n    this.inputHandler = this.inputHandler.bind(this);\n    this.searchEmoji = this.searchEmoji.bind(this);\n\n    this.state.request.then(data => {\n      this.setState({ result: data})\n    });\n  }\n  /**\n   * function changes query\n   * @param event \n   */\n  inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: event.target.value })\n  }\n\n  /**\n   * function filters list of emojis\n   * @param event \n   */\n  searchEmoji = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.state.request.then(data => {\n      this.setState({\n        result: data.filter((item) => \n          item.title.toLowerCase().includes(event.target.value.toLowerCase())\n      )});\n    });\n  }\n\n  render() {\n    return (\n      <div className='main-page'>\n        <h1>ðŸ˜¸Emoji SearchðŸ˜º</h1>\n        <InputBar\n          input={this.state.query}\n          inputHandler={this.inputHandler}\n          searchEmoji={this.searchEmoji} />\n        <EmojiList\n          result={this.state.result}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}