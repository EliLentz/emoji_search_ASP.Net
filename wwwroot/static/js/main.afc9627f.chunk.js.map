{"version":3,"sources":["Components/Input_Value.tsx","Components/Emoji_List.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputBar","className","type","value","this","props","input","onChange","e","inputHandler","searchEmoji","React","Component","EmojiList","ClickToCopy","item","navigator","clipboard","writeText","symbol","result","map","onClick","title","App","event","setState","query","target","emoji","filter","toLowerCase","includes","state","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g65IAyBeA,E,4JAdX,WAAU,IAAD,OACL,OACI,8BACI,uBACAC,UAAY,aACZC,KAAO,OACPC,MAASC,KAAKC,MAAMC,MACpBC,SAAa,SAACC,GAAO,EAAKH,MAAMI,aAAaD,GAAI,EAAKH,MAAMK,YAAYF,Y,GARjEG,IAAMC,WCERC,G,kNAIjBC,YAAc,SAACC,GACXC,UAAUC,UAAUC,UAAUH,EAAKI,S,4CAGvC,WAAS,IAAD,OACJ,OACI,qBAAKlB,UAAY,aAAjB,SACKG,KAAKC,MAAMe,OAAOC,KAAI,SAACN,GAAD,OACnB,oBAAuBd,UAAY,YAAnC,SACI,yBAAQA,UAAY,cAAcqB,QAAW,kBAAM,EAAKR,YAAYC,IAApE,UACQ,iCAAOA,EAAKI,OAAZ,IAAqBJ,EAAKQ,SAC1B,sBAAMtB,UAAY,kBAAlB,qCAHDc,EAAKQ,gB,GAZGZ,IAAMC,Y,OCuC9BY,G,wDApCb,WAAYnB,GAAmB,IAAD,8BAC5B,cAAMA,IASRI,aAAe,SAACgB,GACd,EAAKC,UAAS,cAAEC,MAAF,MAAc,CAACA,MAAQF,EAAMG,OAAOzB,WAXtB,EAe9BO,YAAc,SAACe,GACb,EAAKC,UAAS,cAAEN,OAAF,MAAe,CAACA,OAASS,EAAMC,QAAO,SAACf,GAAD,OACpDA,EAAKQ,MAAMQ,cAAcC,SAASP,EAAMG,OAAOzB,MAAM4B,uBAfrD,EAAKE,MAAQ,CACTN,MAAQ,GACRP,OAASS,GAEb,EAAKpB,aAAe,EAAKA,aAAayB,KAAlB,gBACpB,EAAKxB,YAAc,EAAKA,YAAYwB,KAAjB,gBAPS,E,0CAoB9B,WACE,OACE,sBAAKjC,UAAY,YAAjB,UACE,sEACA,cAAC,EAAD,CACAK,MAASF,KAAK6B,MAAMN,MACpBlB,aAAgBL,KAAKK,aACrBC,YAAeN,KAAKM,cACpB,cAAC,EAAD,CACAU,OAAUhB,KAAK6B,MAAMb,gB,GA9BXT,IAAMC,YCATuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.afc9627f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input_Value.css'\r\n\r\ntype InputProps = {\r\n    readonly input: string,\r\n    readonly inputHandler: any,\r\n    readonly searchEmoji: any\r\n  }\r\n\r\n  //this component builds an input bar to set query for filter a list\r\nclass InputBar extends React.Component<InputProps>{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input \r\n                className = 'input-area'\r\n                type = 'text'\r\n                value = {this.props.input}\r\n                onChange = { (e) => {this.props.inputHandler(e); this.props.searchEmoji(e)}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputBar;","import React from 'react';\r\nimport './Emoji_List.css'\r\n\r\nexport interface Item {\r\n    title: string,\r\n    symbol: string\r\n}\r\ntype ResultProps = {\r\n    readonly result: Item[]\r\n  }\r\n\r\n  //this component builds a list of buttons of all emojis from a json file\r\nexport default class EmojiList extends React.Component<ResultProps>{\r\n\r\n    //function that is called onClick\r\n    //function copy current item to clipboard\r\n    ClickToCopy = (item: Item) => {\r\n        navigator.clipboard.writeText(item.symbol)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = 'emoji-list'>\r\n                {this.props.result.map((item) => (\r\n                    <li key = {item.title} className = 'item-list'>\r\n                        <button className = 'item-button' onClick = {() => this.ClickToCopy(item)}>\r\n                                <span>{item.symbol} {item.title}</span>\r\n                                <span className = 'hide-click-item'>Click to copy emoji</span>\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </div>\r\n        \r\n            );\r\n    }  \r\n}","import React from 'react';\nimport InputBar from './Components/Input_Value';\nimport EmojiList, {Item} from './Components/Emoji_List';\nimport emoji from './emojiList.json'\nimport './App.css'\n\ntype QueryState = {\n  query: string,\n  result: Item[]\n}\n\ntype QueryProps = {\n}\n\nclass App extends React.Component<QueryProps, QueryState>{\n  constructor(props: QueryProps){\n    super(props);\n    this.state = {\n        query : '',\n        result : emoji\n    }\n    this.inputHandler = this.inputHandler.bind(this);\n    this.searchEmoji = this.searchEmoji.bind(this);\n  }\n  //function changes query\n  inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(({query}) => ({query : event.target.value}))\n  }\n\n  //function filters list of emojis\n  searchEmoji = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(({result}) => ({result : emoji.filter((item) => \n    item.title.toLowerCase().includes(event.target.value.toLowerCase()))}));\n  }\n\n  render(){\n    return (\n      <div className = 'main-page'>\n        <h1>ðŸ˜¸Emoji SearchðŸ˜º</h1>  \n        <InputBar\n        input = {this.state.query}\n        inputHandler = {this.inputHandler}\n        searchEmoji = {this.searchEmoji}/>\n        <EmojiList\n        result = {this.state.result}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}